# Description 
# Utility BASH functions for mesh generation, case and mesh cleanup. 
# Used to verify the LENT algorithm.

#Authors
#    Tomislav Maric
#    maric<<at>>csi<<dot>>tu<<minus>>darmstadt<<dot>>de
#    tomislav<<dot>>maric<<at>>gmx<<dot>>com

found_pattern() {

    WORD_ARGUMENT=$1
    WORDS=(${2})

    for i in "${!WORDS[@]}"
    do
        if [[ ${WORD_ARGUMENT^^} =~ ${WORDS[i]^^} ]]; 
        then
            return 0;
        fi
    done

    return 1;
}

generate_hex_mesh() {

    CASE=$1 

    blockMesh -case $CASE
}

generate_tet_mesh() {

    CASE=$1

    echo $CASE/gmsh-input.geo

    gmsh -3 $CASE/gmsh-input.geo 

    gmshToFoam -case $CASE  $CASE/gmsh-input.msh

    # Clean up.
    rm $CASE/gmsh-input.msh
}

generate_poly_mesh() {

    CASE=$1

    generate_tet_mesh $CASE

    # Call polyDualMesh 
    polyDualMesh -case $CASE 60
    # Move the mesh and the fields. 
    cp -rf $CASE/1/polyMesh $CASE/constant
    rm -rf $CASE/0
    mv $CASE/1 $CASE/0

    rm -rf *.obj
}

generate_mesh() {

    CASE=$1

    CASE_UPPERCASE=${CASE^^}
    CASE_UPPERCASE=${CASE_UPPERCASE##*/}

    if [[ "$CASE_UPPERCASE" == *POLY* ]]
    then
        generate_poly_mesh $CASE
        return
    fi

    if [[ "$CASE_UPPERCASE" == *HEX* ]]
    then
        generate_hex_mesh $CASE
        return
    fi

    if [[ "$CASE_UPPERCASE" == *TET* ]]
    then
        generate_tet_mesh $CASE
        return
    fi
}

clear_case() {

    CASE=$1

    pyFoamClearCase.py $CASE
    # Reseting 0 directory  
    if [ -d $CASE/0.org ]; 
    then 
        rm -rf $CASE/0
        cp -rf $CASE/0.org $CASE/0
    fi
    # Removing error files  
    rm -rf $CASE/*.dat
    # Removing pyFoam files  
    rm -rf $CASE/PyFoam*
    # Removing postProcessing directory  
    rm -rf $CASE/postProcessing
    # Removing log files  
    rm -rf $CASE/*.log
    # Removing front msh files
    rm -rf $CASE/*.msh
    # Removing front files
    find . -type f -name "*0*.vtk" -exec rm {} \;
    find . -type f -name "*0*.stl" -exec rm {} \;
}

clear_cases() {


    TARGET_DIR=$1
    EXCLUDE=$2

    if [ ! -d $TARGET_DIR ];
    then
        TARGET_DIR=$(pwd)
    fi

    for file in $(find $TARGET_DIR -type f -name *.foam); 
    do 
        CASE=${file%/*}
        if ! found_pattern $CASE $EXCLUDE;
        then
            clear_case $CASE
        fi
    done
}


generate_meshes() {

    echo "BEGIN Creating meshes" 

    EXCLUDED_CASES=$1

    for file in $(find -type f -name *.foam); 
    do 
        CASE=${file%/*}

        # If case is not excluded.  
        if found_pattern $CASE "$EXCLUDED_CASES";
        then 
            continue
        else
            echo "BEGIN Creating mesh " $CASE
            generate_mesh $CASE
            echo "END Creating mesh " $CASE
        fi
    done;

    echo "END Creating meshes" 

}

run_openfoam_command () {

    COMMAND=$1 
    CASE=$2

    $COMMAND -case $CASE
}

run_cases() {

    echo "BEGIN run_cases " $1

    COMMAND=$1
    EXCLUDED_CASES=$2

    for file in $(find -type f -name *.foam); 
    do 
        CASE=${file%/*}

        # If case is not excluded.  
        if found_pattern $CASE "$EXCLUDED_CASES";
        then 
            continue
        else
            echo "BEGIN Running " $COMMAND " for a case " $CASE
            run_openfoam_command $COMMAND $CASE
            echo "END Running " $COMMAND " for a case " $CASE
        fi
    done;

    echo "END run_cases " $1

}
