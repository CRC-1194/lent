/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      lentSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

testConfiguration
{
    nRandomRuns             @!n_random_runs!@;
    nPerturbedRuns          @!n_perturbed_runs!@;
    writeFields             @!write_fields!@;
    correctFront            @!correct_front!@;
    frontNoise              (@!front_noise!@ @!front_noise!@ @!front_noise!@);
    phaseIndicatorFieldName alpha.water;
}

frontSurface
{
    <!--(if front_surface=="randomSphere")-->
        type                randomizedSphere;
        centre              (2 2 2);
        radius              1;
        centrePerturbation  (0.7 0.7 0.7);
        radiusPerturbation  0;
    <!--(elif front_surface=="randomEllipsoid")-->
        type                    randomizedEllipsoid;
        centre                  (2 2 2);
        semiAxes                (1.5 1.0 0.5);
        centrePerturbation      (0.2 0.5 0.5);
        semiAxesPerturbation    (0.0 0.0 0.0);
    <!--(end)-->
}

markerFieldModel
{
    <!--(if marker_field_model=="tetFillingLevelAlternative")-->
        type            tetFillingLevelAlternative;
        cellDistance    signedDistance;
        pointDistance   pointSignedDistance;
        nSmoothingSteps 0;
    <!--(elif marker_field_model=="tetFillingLevelAlternativeSmoothing1")-->
        type            tetFillingLevelAlternative;
        cellDistance    signedDistance;
        pointDistance   pointSignedDistance;
        nSmoothingSteps 1;
    <!--(elif marker_field_model=="tetFillingLevelAlternativeSmoothing2")-->
        type            tetFillingLevelAlternative;
        cellDistance    signedDistance;
        pointDistance   pointSignedDistance;
        nSmoothingSteps 2;
    <!--(elif marker_field_model=="tetFillingLevel")-->
        type            tetFillingLevel;
        cellDistance    signedDistance;
        pointDistance   pointSignedDistance;
        nSmoothingSteps 0;
    <!--(elif marker_field_model=="singleCellHarmonic")-->
        type            singleCellHarmonic;
        cellDistance    signedDistance;
        pointDistance   pointSignedDistance;
    <!--(elif marker_field_model=="sharp")-->
        cellDistance    signedDistance;
        type            sharp;
    <!--(end)--> 
}


distanceCalculator
{
    type            optimizedOctree;
    narrowBandWidth 4;
    narrowBandPropagation
    {
        type            naiveNarrowBand;
    }
}

frontReconstructionModel
{
    type            timeStepInterval;
    value           1;
}

frontReconstructor
{
    type            foamIsoSurface;
    mergeTolerance  1e-06;
    regularization  off;
    normalConsistency
    {
        type            centerNormal;
    }
}

frontMotionSolver
{
    type            Taylor;
    cellToVertexInterpolation cellPoint;
}

surfaceTensionForceModel
{
    type            Tryggvason;
    filterField     alpha.water;
}

frontSmoother
{
    relaxFactor     0.33;
    nSweeps         2;
    smooth          pointsAndEdges;
}


// ************************************************************************* //
