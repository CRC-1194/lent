# LEvel-set / froNT tracking (LENT) algorithm 

This is the library and application toolbox that implements the LENT algorithm for DNS simulations of two-phase flows. 

Tomislav Maric maric@csi.tu-darmstadt.de, tomislav@sourceflux.de

Mathematical Modeling and Analysis

Center of Smart Interfaces, TU Darmstadt

## Installation 

### Prerequisites

* Compile OpenFOAM with support for C++11
* Supported OpenFOAM version: 2.2.x  
* LENT relies on C++11 and has been successfully compiled with gcc-4.8.2
* `subversion` and `cmake` for compiling Google Test 

### Compiling Google Test

* Make sure that you have configured the OpenFOAM environment:

    ls $WM_PROJECT_DIR/etc/bashrc

should output the location of the `bashrc` OpenFOAM configuration file for your chosen version.  

* Source the *bashrc* configuration script from within the `lent` directory:

    . etc/bashrc

*Note* - CXXFLAGS variable is taken over from OpenFOAM by this step, so if skipped, GTest will be compiled with different compiler flags than LENT which may lead to problems.

* Prepare the Google Test third party directory 

    mkdir $LENT_PROJECT/third-party

* Get the Google Test sources 

    cd $LENT_PROJECT/third-party

    svn checkout http://googletest.googlecode.com/svn/trunk/ gtest

* Build Google Test with cmake 

    cd gtest

    mkdir build

    cd build 

    cmake -DBUILD_SHARED_LIBS=ON -Dgtest_build_samples=ON -G"Unix Makefiles" ..

    make


*Note* - if everything above was successful, LENT library, solvers and testing applications can be compiled. If not, you should still be able to compile the library and the solvers, and the testing applications will report errors during compilation.

### Compiling the LENT library and solvers 

*Note* : the following installation instructions do not compile the testing applications: if Google Test has not been built alongside LENT as described above, testing applications will fail to compile. 

* Source the *bashrc* configuration script from within the top directory:

    . etc/bashrc

* Execute Allwmake from within the top directory:

    . ./Allwmake

For permanent configuration of the environmental variables, source the *bashrc* script from your local *~/.bashrc*: 

    source path/to/lent/etc/bashrc

### Installing PyFoam 

PyFoam scripts are used directly by some LENT utilities, so PyFoam needs to be installed on the system. Information on PyFoam installation can be found on the [OpenFOAM Wiki](http://openfoamwiki.net/index.php/Contrib/PyFoam). 

## Usage

There are two important utilities that are distributed with the LENT repository which are used to prepare the simulation case:  

* `lentClearCasesRecursive` - `pyFoam` based script that cleans the LENT cases recursively
* `lentSetFields` - pre-processing application that sets the signed distance and cell search fields required by the LENT method

for the lent solvers:

* `lentReconstruct` - solver application used to *reconstruct* the LENT front 
* `lentAdvect` - solver application used to *advect* the LENT front with a *prescribed velocity field*
* `lentFoam` - solver application used to execute two-phase Direct Numerical Simulations with the LENT method

Other testing and utility applications are available in the `applications` folder with the appropriate descriptions placed in the implementation file headers. 

### Utilities information 

#### `lentClearCasesRecursive` 

* Expects to find `0.org` directory with the original fields in the simulation case directory. The LENT method modifies the initial `0` time-step directory, as it requires the signed and search distance fields to be computed before the start of the simulation. 
* Is used mostly for validation cases of the `lent-validation-cases` repository. 
* Even if `0.org` doesn't exist, it will clean up the `front/front-000*.vtk` files written from the last run. 

#### `lentSetFields` 

* Requires a file named `front.stl` in the folder `front` of the LENT simulation case. 
* It uses the surface mesh stored in the `front.stl` file to pre-process the signed and search distance fields. 


### Running cases

This is the standard workflow: 

    lentClearCasesRecursive
    lentSetFields
    lentFoam 

`lentFoam` can be replaced by another solver application (`lentReconstruct` or `lentAdvect`).

### HowTo: Generation of the front.stl file using FreeCAD and ParaView

To simulate a case using the LENT method an initial interface is
needed. The interface geometry is described the file "front/front.stl"
in ASCII format.

Below, the generation of a STL-file with FreeCAD and ParaView
is illustrated for simple geometries. As examples serve a cylinder and a sphere
which are used for the test case of a stationary droplet in 2D and 3D,
respectively.

_Note_: this HowTo has been tested with FreeCAD v0.15 and ParaView 3.12.0.

#### Steps in FreeCAD

* Create a new file: `File --> New`
* Open the dropdown menu in the menu bar and switch to `Part`.
* Below the dropdown menu click the button `Creation of parametrized
  geometric primitives`.
* At the tabs on the left hand side switch from `Model` to `Tasks`. Below in
  the dropdown menu select the desired geometric object, e.g. circle
  (Brackbill 2D) or sphere (Brackbill 3D).
* Set the dimensions according to your case and click `Create`.
* 2D only: since 2D cases in OpenFOAM also have an expansion into the
  third dimesion, 2D geometries have to be extruded accordingly. This is
  achieved by the following steps:

    * On the left hand side switch to the `Model` tab.
    * Select your geometry in the part tree, e.g. the circle.
    * Click the button "Extrude a selected sketch". (If the button is
      disabled, switch to the `Tasks` tab and click `Close`. This should
      enable it.)
    * Now set the extrusion direction (the default [0 0 1] should
      usually work), the extrusion length in millimeter and click `OK`.
* The geometry can now be exported. Select either the geometry object
  itself (3D), e.g. the sphere, or the extrusion object (2D) in the
  `Model` tab.
* Open the export dialog: `File --> Export` or `Ctrl + E`

* As `Files of type` select `Mesh formats`.
* Enter "front.stl" and click `Save`.

#### Steps in ParaView

FreeCAD is only able to save STL files in binary format. With ParaView
it can be converted into ASCII format.

* Open the STL file with ParaView
* Open the save dialog: `File --> Save Data` or `Ctrl + S`
* As `Files of type` select `Stereo Lithography File Format`, choose name
  and location and click `OK`.
* A dialog box opens. Choose ASCII format in the dropdown menu and click
  `OK`.

#### A note on units

_ Section incomplete _

A STL-file contains no information regarding unit of length. Since FreeCAD
uses millimeter while OpenFOAM usually works with meters, the created
geometry will be too big by a factor of thousand. This can be corrected
by rescaling the coordinates stored in the STL-file. A Python script for
this purpose is included in LENT.

TODO:

* Add description of script when it's finished
* Include correct path to script in this description
